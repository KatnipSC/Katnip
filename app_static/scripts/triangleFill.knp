func: minmax(warp=true, type[exp]){
    # Iteratively check #1 and #2 of args list, and compare them
    while(gt(listLength(@args), 1)) {
        if (equals(a.type, "min")){
            if (lt(getItem(@args, 1), getItem(@args, 2))) {
                listDelete(@args, 2);
            } else {
                listDelete(@args, 1);
            }
        } else {
            if (gt(getItem(@args, 1), getItem(@args, 2))) {
                listDelete(@args, 2);
            } else {
                listDelete(@args, 1);
            }
        }
    }
}

func: edgeFunction(warp=true, x1[exp], y1[exp], x2[exp], y2[exp], px[exp], py[exp]){
    # Calculate the edge function
    setvar($return, subtract(multiply(subtract(a.px, a.x1), subtract(a.y2, a.y1)), multiply(subtract(a.py, a.y1), subtract(a.x2, a.x1))))
}

func: fillTriangle(warp=true, x1[exp], y1[exp], x2[exp], y2[exp], x3[exp], y3[exp]){
    # Sort points by Y-coordinate (a.y1 <= a.y2 <= a.y3)
    if(gt(a.y1, a.y2)){
        setvar($tempX, a.x1)
        setvar($tempY, a.y1)
        setvar(a.x1, a.x2)
        setvar(a.y1, a.y2)
        setvar(a.x2, $tempX)
        setvar(a.y2, $tempY)
    }
    if(gt(a.y2, a.y3)){
        setvar($tempX, a.x2)
        setvar($tempY, a.y2)
        setvar(a.x2, a.x3)
        setvar(a.y2, a.y3)
        setvar(a.x3, $tempX)
        setvar(a.y3, $tempY)
    }
    if(gt(a.y1, a.y2)){
        setvar($tempX, a.x1)
        setvar($tempY, a.y1)
        setvar(a.x1, a.x2)
        setvar(a.y1, a.y2)
        setvar(a.x2, $tempX)
        setvar(a.y2, $tempY)
    }

    # Bounding box for the triangle
    listDeleteAll(@minmax)
    listAdd(@minmax, a.x1)
    listAdd(@minmax, a.x2)
    listAdd(@minmax, a.x3)

    listDeleteAll(@args)
    listAdd(@args, a.x1)
    listAdd(@args, a.x2)
    listAdd(@args, a.x3)
    fn.minmax(type: "min")
    setvar($xmin, mathop("floor", getItem(@args, 1)))
    listDeleteAll(@args)
    listAdd(@args, a.x1)
    listAdd(@args, a.x2)
    listAdd(@args, a.x3)
    fn.minmax(type: "max")
    setvar($xmax, mathop("ceiling", getItem(@args, 1)))
    listDeleteAll(@args)
    listAdd(@args, a.y1)
    listAdd(@args, a.y2)
    listAdd(@args, a.y3)
    fn.minmax(type: "min")
    setvar($ymin, mathop("floor", getItem(@args, 1)))
    listDeleteAll(@args)
    listAdd(@args, a.y1)
    listAdd(@args, a.y2)
    listAdd(@args, a.y3)
    fn.minmax(type: "max")
    setvar($ymax, mathop("ceiling", getItem(@args, 1)))
    listDeleteAll(@args)

    # Precompute edges
    fn.edgeFunction(x1: a.x1, y1: a.y1, x2: a.x2, y2: a.y2, px: a.x3, py: a.y3)
    setvar($area, $return) # Full triangle area

    # Iterate through bounding box and check if the pixel is inside the triangle
    setvar($py, $ymin)
    repeat(add(subtract($ymax, $ymin), 1)){
        setvar($px, $xmin)
        repeat(add(subtract($xmax, $xmin), 1)){
            # Compute edge functions for current pixel
            fn.edgeFunction(x1: a.x2, y1: a.y2, x2: a.x3, y2: a.y3, px: $px, py: $py)
            setvar($w1, $return)
            fn.edgeFunction(x1: a.x3, y1: a.y3, x2: a.x1, y2: a.y1, px: $px, py: $py)
            setvar($w2, $return)
            fn.edgeFunction(x1: a.x1, y1: a.y1, x2: a.x2, y2: a.y2, px: $px, py: $py)
            setvar($w3, $return)

            # Check if the pixel is inside the triangle (all weights >= 0 or <= 0)
            if (or(and(gt($w1, 0), and(gt($w2, 0), gt($w3, 0))) , and(lt($w1, 0), and(lt($w2, 0), lt($w3, 0))))){
                # Set pixel color and draw
                hexPen("#FF0000") # Change the fill color as desired
                gotoXY($px, $py)
                penDown()
                move(1)
                penUp()
            }

            changeVar($px, 1) # Move to the next pixel on the X-axis
        }

        changeVar($py, 1) # Move to the next pixel on the Y-axis
    }
}

whenflag(){
    penClear()
    setfx("ghost", 100) # Hide sprite
    setPenSize(1)

    # Test with example points
    fn.fillTriangle(x1: -50, y1: -50, x2: 50, y2: -50, x3: 0, y3: 50)
    timeSay("Triangle Filled!", 3)
    stop("this script")
}
