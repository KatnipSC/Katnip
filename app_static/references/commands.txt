# useName:opCode:type:inputName1,inputName2, ...
# type: [hat (top of stack), 
#        reporter (fits inside parameters), 
#        c (envelops code), 
#        stack (block that fits into stack), 
#        cap (ends stack)]

# NOTE: all parameter names will be set to uppercase, so case does not matter
# NOTE: commands are NOT case-sensitive. To change this, change command_manager and the way it matches the command name

# BLOCKS:

# internal reporters (not meant to be used directly, but the code will use them)
# NOTE: DO NOT CHANGE THESE NAMES - they are supposed to be static
goto_menu:motion_goto_menu:reporter:f.to{_random_;_mouse_;...}
glideto_menu:motion_glideto_menu:reporter:f.to{_random_;_mouse_;...}
point_towards_menu:motion_pointtowards_menu:reporter:f.towards{_random_;_mouse_;...}
costume_menu:looks_costume:reporter:f.costume{...}
backdrop_menu:looks_backdrops:reporter:f.backdrop{...}
sound_menu:sound_sounds_menu:reporter:f.sound_menu{...}
clone_menu:control_create_clone_of_menu:reporter:f.clone_option
touching_menu:sensing_touchingobjectmenu:reporter:f.touchingobjectmenu
distance_menu:sensing_distancetomenu:reporter:f.distancetomenu
key_menu:sensing_keyoptions:reporter:f.key_option
sensingobj_menu:sensing_of_object_menu:reporter:f.object
pen_menu:pen_menu_colorParam:reporter:f.colorParam

# NAME: motion
move:motion_movesteps:stack:i.steps
turn:motion_turnright:stack:i.degrees
gotoXY:motion_gotoxy:stack:i.x,i.y
goto:motion_goto:stack:i.to(goto_menu)
glideXY:motion_glidesecstoxy:stack:i.secs,i.x,i.y
glideto:motion_glideto:stack:i.secs,i.to(glideto_menu)
point:motion_pointindirection:stack:i.direction
pointTo:motion_pointtowards:stack:i.towards(point_towards_menu)
changeX:motion_changexby:stack:i.dx
setX:motion_setx:stack:i.x
changeY:motion_changeyby:stack:i.dy
setY:motion_sety:stack:i.y
edgeBounce:motion_ifonedgebounce:stack:
rotationStyle:motion_setrotationstyle:stack:f.style{left-right;don't rotate;all around}
xPos:motion_xposition:reporter:
yPos:motion_yposition:reporter:
direction:motion_direction:reporter:

# NAME: looks
# NOTE: ideally changelayer would have a default "forward" and then to go backwards just use negitive numbers
timeSay:looks_sayforsecs:stack:i.message,i.secs
say:looks_say:stack:i.message
timeThink:looks_thinkforsecs:stack:i.message,i.secs
think:looks_think:stack:i.message
switchCostume:looks_switchcostumeto:stack:i.costume(costume_menu)
nextCostume:looks_nextcostume:stack:
switchBackdrop:looks_switchbackdropto:stack:i.costume(backdrop_menu)
nextBackdrop:looks_nextbackdrop:stack:
changeSize:looks_changesizeby:stack:i.change
setSize:looks_setsizeto:stack:i.size
changeFx:looks_changeeffectby:stack:f.effect{color;fisheye;whirl;pixelate;mosaic;brightness;ghost},i.change
setFx:looks_seteffectto:stack:f.effect{color;fisheye;whirl;pixelate;mosaic;brightness;ghost},i.value
clearFx:looks_cleargraphiceffects:stack:
show:looks_show:stack:
hide:looks_hide:stack:
goToLayer:looks_gotofrontback:stack:f.front_back{front;back}
changeLayer:looks_goforwardbackwardlayers:stack:f.forward_backward{front;back},num
getCostume:looks_costumenumbername:reporter:f.number_name{number;name}
getBackdrop:looks_backdropnumbername:reporter:f.number_name{number;name}
size:looks_size:reporter:

# NAME: sound
play:sound_play:stack:i.sound_menu(sound_menu)
playWait:sound_playuntildone:stack:i.sound_menu(sound_menu)
stopSounds:sound_stopallsounds:stack:
changeSoundFx:sound_changeeffectby:stack:i.effect{pitch;pan left/right},i.value
setSoundFx:sound_seteffectto:stack:i.effect{pitch;pan left/right},i.value
clearSoundFx:sound_cleareffects:stack:
changeVolume:sound_changevolumeby:stack:i.volume
setVolume:sound_setvolumeto:stack:i.volume
volume:sound_volume:reporter:

# NAME: events
whenFlag:event_whenflagclicked:hat:
whenKey:event_whenkeypressed:hat:f.key_option{...}
whenSpriteClicked:event_whenthisspriteclicked:hat:
whenBackdropSwitch:event_whenbackdropswitchesto:hat:f.backdrop{backdrop1;...}
whenGreater:event_whengreaterthan:hat:f.whengreaterthanmenu{loudness,timer},i.value
whenBroadcast:event_whenbroadcastreceived:hat:f.broadcast_option{...}
whenTouching:event_whentouchingobject:hat:i.touchingobjectmenu(touching_menu)
sendBroadcast:event_broadcast:stack:i.broadcast_input
sendBroadcastWait:event_broadcastandwait:stack:i.broadcast_input

# NAME: control
# NOTE: if-else needs some attention. not sure that the command will parse well with the current set up
wait:control_wait:stack:i.duration
repeat:control_repeat:c:i.times,i.substack
forever:control_forever:c:i.substack
if:control_if:c:i.condition[bool],i.substack
ifElse:control_if_else:c:i.condition[bool],i.substack,i.substack2
waitUntil:control_wait_until:stack:i.condition[bool]
repeatUntil:control_repeat_until:c:i.condition[bool],i.substack
stop:control_stop:cap:f.stop_option{all;this script;other scripts in sprite}
whenCloneStart:control_start_as_clone:hat:
createClone:control_create_clone_of:stack:i.clone_option(clone_menu)
deleteClone:control_delete_this_clone:cap:
while:control_while:c:i.condition,i.substack
for:control_for_each:c:f.variable,i.value,i.substack
allAtOnce:control_all_at_once:c:i.substack
counter:control_get_counter:reporter:
clearCounter:control_clear_counter:stack:
incrCounter:control_incr_counter:stack:

# NAME: sensing
touching:sensing_touchingobject:reporter:i.touchingobjectmenu(touching_menu)
touchingClr:sensing_touchingcolor:reporter:i.color
clrTouchingClr:sensing_coloristouchingcolor:reporter:i.color,i.color2
distanceto:sensing_distanceto:reporter:i.distancetomenu(distance_menu)
ask:sensing_askandwait:stack:i.question
answer:sensing_answer:reporter:
keypressed:sensing_keypressed:reporter:i.key_option(key_menu)
mouse:sensing_mousedown:reporter:
mouseX:sensing_mousex:reporter:
mouseY:sensing_mousey:reporter:
setdragmode:sensing_setdragmode:stack:f.drag_mode{draggable;not draggable}
loudness:sensing_loudness:reporter:
timer:sensing_timer:reporter:
resetTime:sensing_resettimer:stack:
getAttribute:sensing_of:reporter:f.property{x position;y position;direction;costume #;costume name;size;volume},i.object(sensingobj_menu)
current:sensing_current:reporter:f.currentmenu{year;month;date;day of week;hour;minute;second}
dayssince2000:sensing_dayssince2000:reporter:
username:sensing_username:reporter:

# NAME: operators
# NOTE: Might make these operations standalone:
#    + - * / % < > == or and
add:operator_add:reporter:i.num1,i.num2
subtract:operator_subtract:reporter:i.num1,i.num2
multiply:operator_multiply:reporter:i.num1,i.num2
divide:operator_divide:reporter:i.num1,i.num2
random:operator_random:reporter:i.from,i.to
lt:operator_lt:reporter:i.operand1,i.operand2
equals:operator_equals:reporter:i.operand1,i.operand2
gt:operator_gt:reporter:i.operand1,i.operand2
and:operator_and:reporter:i.operand1[bool],i.operand2[bool]
or:operator_or:reporter:i.operand1[bool],i.operand2[bool]
not:operator_not:reporter:i.operand[bool]
join:operator_join:reporter:i.string1,i.string2
getLetter:operator_letter_of:reporter:i.letter,i.string
length:operator_length:reporter:i.string
contains:operator_contains:reporter:i.string1,i.string2
mod:operator_mod:reporter:i.num1,i.num2
round:operator_round:reporter:i.num
mathop:operator_mathop:reporter:f.operator{abs;floor;ceiling;sqrt;sin;cos;tan;asin;acos;atan;ln;log;e ^;10 ^},i.num

# NAME: variables
setvar:data_setvariableto:stack:f.variable{...},i.value
changevar:data_changevariableby:stack:f.variable{...},i.value
showvar:data_showvariable:stack:f.variable{...}
hidevar:data_hidevariable:stack:f.variable{...}

# NAME: lists
listAdd:data_addtolist:stack:f.list,i.item
listDelete:data_deleteoflist:stack:f.list,i.index
listDeleteAll:data_deletealloflist:stack:f.list
listInsert:data_insertatlist:stack:f.list,i.index,i.item
listReplace:data_replaceitemoflist:stack:f.list,i.index,i.item
getItem:data_itemoflist:reporter:f.list,i.index
getItemNum:data_itemnumoflist:reporter:f.list,i.item
listLength:data_lengthoflist:reporter:f.list
listContains:data_listcontainsitem:reporter:f.list,i.item
listShow:data_showlist:stack:f.list
listHide:data_hidelist:stack:f.list

# NAME: my_blocks
# NOTE: only proc arguments are listed here because proc calls/defs are processed seperately
funcargbool:argument_reporter_boolean:reporter:f.value
funcargexp:argument_reporter_string_number:reporter:f.value

# NAME: pen
penClear:pen_clear:stack:
stamp:pen_stamp:stack:
penDown:pen_penDown:stack:
penUp:pen_penUp:stack:
hexPen:pen_setPenColorToColor:stack:i.color
changePen:pen_changePenColorParamBy:stack:i.color_param{color;saturation;brightness;transparency},i.value
setPen:pen_setPenColorParamTo:stack:i.color_param(pen_menu),i.value
changePenSize:pen_changePenSizeBy:stack:i.size
setPenSize:pen_setPenSizeTo:stack:i.size
setPenShade:pen_setPenShadeToNumber:stack:i.shade
changePenShade:pen_changePenShadeBy:stack:i.shade